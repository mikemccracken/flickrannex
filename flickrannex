#!/usr/bin/env python

import os
import sys
import json
import time
import inspect
import tempfile
import appdirs
import base64
import logging

logging.basicConfig(filename="/tmp/flickrannex.log",
                    format="%(levelname)s %(asctime)s %(funcName)s %(lineno)d %(msg)s",
                    level=logging.INFO)

conf = False
version = "0.1.10"
plugin = "flickrannex-" + version

config_dir = appdirs.user_data_dir('flickrannex')
if not os.path.exists(config_dir):
    os.makedirs(config_dir)

import pkg_resources
small_png_fn = pkg_resources.resource_filename('libflickrannex', 'logo_small.png')

if "--dbglevel" in sys.argv:
    dbglevel = int(sys.argv[sys.argv.index("--dbglevel") + 1])
else:
    dbglevel = 0

if "--directories-as-tags" in sys.argv:
    dirtags = 1
else:
    dirtags = 0

configfile = os.path.join(config_dir, 'config.json')
if "--configfile" in sys.argv:
    configfile = sys.argv[sys.argv.index("--configfile") + 1]

import libflickrannex.CommonFunctions as common

import flickrapi
import libflickrannex.png as fapng

api_key = "2f6b468927a824c00b33c4672b10d24e"
api_secret = "e28467365581abd4"

flickr = flickrapi.FlickrAPI(api_key, api_secret)
user_id = False



def login(uname):
    logging.info(uname)
    (token, frob) = flickr.get_token_part_one(perms='delete')
    if not token: 
        try:
            raw_input("Press ENTER after you authorized this program")
        except Exception as e:
            logging.info("Sleeping for 60s while waiting for user to authorize program: " + repr(e))
            time.sleep(60)
    flickr.get_token_part_two((token, frob))
    global user_id
    user_id = flickr.people_findByEmail(find_email=uname)
    user_id = user_id[0].attrib["nsid"]
    logging.info("Done: " + repr(token) + " - " + repr(frob) + " - " + repr(user_id))

def verifyFileType(filename):
    logging.info(filename)
    status = False
    fname, ext = os.path.splitext(os.path.basename(filename))
    # Video gets converted to flv.
    # pdf gets (Horribly badly) converted to jpg
    if ext.lower() in [".jpg", ".jpeg", ".gif", ".png"]:
        logging.info("Filetype can be uploaded: " + ext)
        status = True

    logging.info("Done: " + repr(status))
    return status

def postFile(subject, filename, folder, git_top_level):
    logging.info("%s to %s - %s" % ( filename, repr(folder), subject))

    def func(progress, done):
        logging.info("func: %s - %s" % (repr(progress), repr(done)))
        if len(done):
            print("Done uploading")
        else:
            print("At %s%%" % progress)

    width, height, pixels, meta, text = fapng.Reader(filename=small_png_fn).read()
    upper_limit = 40234050
    if os.path.getsize(filename) > upper_limit:
        print("%s size: %s more than %s. Skipping" % ( filename, os.path.getsize(filename), upper_limit))
        sys.exit(1)

    tags = []
    if conf["encrypted"]:
        thnd, tfile = tempfile.mkstemp(prefix='encoded-', suffix=subject)
        f = os.fdopen(thnd)
        text = readFile(filename, "rb")
        text = base64.b64encode(text)
    
        w = fapng.Writer(width, height, text={"data": text})
        w.write(f, pixels)
        os.close(thnd)
    else:
        tfile = filename

        if git_top_level:
            logging.info("git top level directory: %s" % git_top_level)
            dirpath = os.path.relpath(os.path.dirname(tfile), git_top_level)
            if dirpath.find(".git") == -1:
                tags = dirpath.split(os.sep)
                logging.info("Tags added to photo " + repr(tags))

    logging.info("Uploading: " + tfile)

    res = flickr.upload(filename=tfile, is_public=0, title=subject,
                        description=os.path.basename(tfile), tags = '"' + '" "'.join(tags) + '"',
                        callback=func)

    if res is not None:
        if isinstance(folder, int) or isinstance(folder, long):
            flickr.photosets_addPhoto(photoset_id=folder, photo_id=res[0].text)
        else:
            flickr.photosets_create(title=folder, primary_photo_id=res[0].text)

    if conf["encrypted"]:
        os.unlink(tfile)
    if res is not None:
        logging.info("Done: " + repr(res))
    else:
        print("Failed to store: " + repr(res))
        sys.exit(1)

def findFile(subject, folder, root=False):
    logging.info(subject + " - " + repr(folder) + " - " + repr(user_id))
    file = False
    page=1
    while not file:
        logging.info("Trying page: " + repr(page))
        if root:
            photos = flickr.photosets_getPhotos(photoset_id=folder, per_page=500, page=page)
        else:
            photos = flickr.photosets_getPhotos(photoset_id=folder, per_page=500, page=page)
        photos = photos.find("photoset")
        for s in photos.findall('photo'):
            ttitle = s.attrib["title"]
            logging.info("Found title: " + repr(ttitle))
            if ttitle == subject:
                if root:
                    file = ttitle
                else:
                    file = long(s.attrib["id"])

                logging.info("Done: " + repr(file))
                return file

        if int(photos.attrib["pages"]) > page:
            page +=1
        else:
            logging.info("Error, found nothing:" + repr(photos))
            logging.info("Error, found nothing:" + repr(photos.attrib))
            break
    logging.info("Failure: " + repr(file))
    return False

def checkFile(subject, folder):
    logging.info(subject + " - " + repr(folder) + " - " + repr(user_id))

    if not isinstance(folder, int) and not isinstance(folder, long):
        logging.info("No set exists, thus no files exists: " + repr(folder) +  " - " + repr(type(folder)))
        return False

    org_sub = subject

    file = findFile(subject, folder)

    if file:
        logging.info("Found: " + repr(file))
        print(org_sub)
        return True
    else:
        logging.info("Failure")
        return False

def getFile(subject, filename, folder):
    logging.info(subject)

    file = findFile(subject, folder)

    if file:
        url = flickr.photos_getSizes(photo_id=file)
        url = url.find('sizes').findall('size')
        url = url[len(url) -1]

        logging.info("Using: " + repr(url.attrib["label"]) + " - " + repr(url.attrib["source"]))
        
        res = common.fetchPage({"link": url.attrib["source"]})

        if "encrypted" in conf and conf["encrypted"]:
            r=fapng.Reader(bytes=res["content"])
            width, height, pixels, meta, text = r.read()
            text = base64.b64decode(text["data"])
            saveFile(filename, text, "wb")
        else:
            saveFile(filename, res["content"], "wb")

        logging.info("Done")
    else:
        logging.info("Failure")


def deleteFile(subject, folder):
    logging.info(subject + " - " + repr(folder))

    file = findFile(subject, folder)

    if file:
        res = flickr.photos_delete(photo_id=file)
        logging.info("Done: " + repr(res))
    else:
        logging.info("Failure: " + repr(file))

def readFile(fname, flags="r"):
    logging.info(repr(fname) + " - " + repr(flags))

    if not os.path.exists(fname):
        logging.info("File doesn't exist")
        return False
    d = ""
    try:
        t = open(fname, flags)
        d = t.read()
        t.close()
    except Exception as e:
        logging.exception("Exception: reading file")

    logging.info("Done")
    return d

def saveFile(fname, content, flags="w"):
    logging.info(fname + " - " + str(len(content)) + " - " + repr(flags))
    t = open(fname, flags)
    t.write(content)
    t.close()
    logging.info("Done")

def main():
    global conf
    args = sys.argv

    ANNEX_ACTION = os.getenv("ANNEX_ACTION")
    ANNEX_KEY = os.getenv("ANNEX_KEY")
    ANNEX_HASH_1 = os.getenv("ANNEX_HASH_1")
    ANNEX_HASH_2 = os.getenv("ANNEX_HASH_2")
    ANNEX_FILE = os.getenv("ANNEX_FILE")
    GIT_TOP_LEVEL = os.getenv("GIT_TOP_LEVEL")

    envargs = []
    if ANNEX_ACTION:
        envargs += ["ANNEX_ACTION=" + ANNEX_ACTION]
    if ANNEX_KEY:
        envargs += ["ANNEX_KEY=" + ANNEX_KEY]
    if ANNEX_HASH_1:
        envargs += ["ANNEX_HASH_1=" + ANNEX_HASH_1]
    if ANNEX_HASH_2:
        envargs += ["ANNEX_HASH_2=" + ANNEX_HASH_2]
    if ANNEX_FILE:
        envargs += ["ANNEX_FILE=" + ANNEX_FILE]
    if GIT_TOP_LEVEL:
        envargs += ["GIT_TOP_LEVEL=" + GIT_TOP_LEVEL]
    logging.info("ARGS: " + repr(" ".join(envargs + args)))

    conf = readFile(configfile)
    try:
        conf = json.loads(conf)
    except Exception as e:
        logging.exception("conf error")
        logging.info("Couldn't parse conf: " + repr(conf))
        conf = {"folder": "gitannex"}

    logging.info("Conf: " + repr(conf))
    changed = False
    if "uname" not in conf:
        logging.info("Asking user for email address")
        print("Please make sure your email address has been associated with flickr.")
        conf["uname"] = raw_input("Please enter your flickr email address: ")
        logging.info("e-mail set to: " + conf["uname"])
        changed = True

    if "encrypted" not in conf:
        conf["encrypted"] = "?"
        logging.info("Asking user for encryption")
        while (conf["encrypted"].lower().find("y") == -1 and conf["encrypted"].lower().find("n") == -1 ):
            conf["encrypted"] = raw_input("Should uploaded files be encrypted [yes/no]: ")
        conf["encrypted"] = conf["encrypted"].lower().find("y") > -1
        logging.info("encryption set to: " + repr(conf["encrypted"]))
        changed = True

    login(conf["uname"])
    ANNEX_FOLDER = conf["folder"]
    page=1
    logging.info("Photoset %s searching for %s" % (repr(ANNEX_FOLDER), repr(conf["folder"])))
    while ANNEX_FOLDER == conf["folder"]:
        logging.info("Trying page: " + repr(page))
        sets = flickr.photosets_getList(per_page=500)
        sets = sets.find('photosets')
        for s in sets.findall('photoset'):
            if s[0].text == conf["folder"]:
                logging.info("Photoset %s found: %s" % (s[0].text, repr(s[0].text)))
                ANNEX_FOLDER = long(s.attrib["id"])
                break
        if int(sets.attrib["pages"]) > page:
            page +=1
        else:
            logging.info("Error. found nothing:" + repr(sets.attrib))
            break
        
    if not conf["encrypted"] and ANNEX_KEY and not verifyFileType(ANNEX_KEY):
        print("Unencrypted flickr can only accept picture and video files")
        sys.exit(1)

    if ANNEX_FILE and os.path.exists(ANNEX_FILE) and os.path.getsize(ANNEX_FILE) > 31457280:
        print("flickr won't accept files larger than ~30mb")
        sys.exit(1)

    if "store" == ANNEX_ACTION:
        postFile(ANNEX_KEY, ANNEX_FILE, ANNEX_FOLDER, GIT_TOP_LEVEL)
    elif "checkpresent" == ANNEX_ACTION:
        checkFile(ANNEX_KEY, ANNEX_FOLDER)
    elif "retrieve" == ANNEX_ACTION:
        getFile(ANNEX_KEY, ANNEX_FILE, ANNEX_FOLDER)
    elif "remove" == ANNEX_ACTION:
        deleteFile(ANNEX_KEY, ANNEX_FOLDER)
    elif changed or True:
        if user_id:
            print("Program sucessfully setup")
            if conf["encrypted"]:
                encryption = "shared"
            else:
                encryption = "none"
            setup = '''
Please run the following commands in your annex directory:

git config annex.flickr-hook '{scriptname}/flickrannex.py'

# If you have a direct mode repository and want to use your directores as tags, use this hook instead
git config annex.flickr-hook 'GIT_TOP_LEVEL=`git rev-parse --show-toplevel` /usr/bin/python2 {scriptname}/flickrannex.py'

git annex initremote flickr type=hook hooktype=flickr encryption={encryption}
git annex describe flickr "the flickr library"
git annex content flickr exclude=largerthan=30mb

# If you have an unencrypted repository also use this
git annex content flickr uuid include=*.jpg or include=*.jpeg or include=*.gif or include=*.png
'''.format(scriptname=os.path.abspath(sys.argv[0]), encryption=encryption)
            print setup
            logging.info("Saving " + repr(configfile))
            saveFile(configfile, json.dumps(conf))
        else:
            print("Error during setup. Please try again")
    else:
        print("ERROR")
        sys.exit(1)

t = time.time()
logging.info("START")
if __name__ == '__main__':
    main()
logging.info("STOP: %ss" % int(time.time() - t))
